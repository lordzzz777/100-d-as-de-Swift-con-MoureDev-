import Foundation


// ----- Protocolos (Protocols): -----


// Un protocolo es una especificación que define...
// un conjunto de métodos y propiedades que un...
// tipo puede adoptar. Los protocolos proporcionan...
// una forma de definir interfaces o contratos que...
// los tipos pueden cumplir, permitiendo así que...
// diferentes tipos compartan un comportamiento común.
// Los protocolos son una parte fundamental...
// de la programación orientada a protocolos en Swift.

// Definición de Protocolo:
// Se define utilizando la palabra clave protocol.

protocol MiProtocolo {
    // Requisitos del protocolo aquí
}

// Requisitos del Protocolo:

// Al hablar de "requisitos del protocolo"...
// en Swift, nos referimos a los métodos,...
// propiedades y otros elementos que un...
// tipo debe implementar si desea...
// adoptar dicho protocolo.
// Los requisitos del protocolo son...
// esencialmente las reglas que definen...
// qué debe hacer un tipo para cumplir...
// con cierta interfaz o contrato.

// Métodos:
// Un protocolo puede requerir que un tipo...
// implemente uno o más métodos.
// Estos métodos pueden ser de instancia o de tipo (estáticos).

protocol MiProtocolo {
    func metodoRequerido()
    static func metodoEstaticoRequerido()
}

// Cuando un tipo adopta este protocolo,...
// debe proporcionar implementaciones...
// para ambos métodos requeridos.

// Propiedades:
// Los protocolos pueden especificar propiedades...
// que un tipo debe proporcionar. Las propiedades...
// pueden ser de solo lectura o de lectura y escritura.

protocol MiProtocolo {
    var propiedadRequerida: Int { get }
    var otraPropiedadRequerida: String { get set }
}

// Al adoptar este protocolo, el tipo debe ofrecer...
// propiedades que cumplan con los requisitos del protocolo.

// Inicializadores:
// Los protocolos pueden requerir la...
// implementación de inicializadores específicos.

protocol MiProtocolo {
    init(parametro: Int)
}

// Un tipo que adopta este protocolo debe proporcionar...
// una implementación para el inicializador requerido.

// Requisitos Opcionales:
// Los protocolos también pueden contener requisitos...
// opcionales, que son métodos o propiedades que un...
// tipo puede optar por implementar.

@objc protocol MiProtocolo {
    @objc optional func metodoOpcional()
}

// Los requisitos opcionales deben declararse con...
// la etiqueta @objc y, al adoptar el protocolo,...
// el tipo puede decidir si implementar o no esos requisitos.

// Requisitos de Accesorios y Mutadores:
// En el caso de propiedades, los protocolos pueden...
// especificar requisitos para los métodos get y set.

protocol MiProtocolo {
    var propiedad: Int { get }
   // set
}

// Los tipos que adoptan este protocolo deben proporcionar...
// implementaciones para ambos accesos y mutadores de la propiedad.

// En resumen, los requisitos del protocolo son las reglas que un...
// tipo debe seguir al adoptar un protocolo específico.
// Al proporcionar implementaciones para los métodos,...
// propiedades y otros elementos requeridos,...
// los tipos garantizan que cumplen con la interfaz...
// especificada por el protocolo. Esto facilita la...
// interoperabilidad y la reutilización de código...
// en diferentes partes de una aplicación Swift.



// Adopción de Protocolo:

// La "adopción de protocolo" en Swift se refiere al acto...
// de hacer que un tipo (clase, estructura o enumeración)...
// cumpla con los requisitos de un protocolo específico.
// Cuando un tipo adopta un protocolo, se compromete...
// a implementar los métodos, propiedades u otros...
// requisitos definidos por ese protocolo.

// Sintaxis de Adopción de Protocolo:
// Para adoptar un protocolo, se utiliza la palabra...
// clave protocol seguida del nombre del protocolo...
// después de los dos puntos al declarar la clase,...
// estructura o enumeración. Aquí hay un ejemplo básico:

protocol MiProtocolo {
    func miMetodo()
    var miPropiedad: Int { get }
}

class MiClase: MiProtocolo {
    func miMetodo() {
        // Implementación del método del protocolo
    }

    var miPropiedad: Int = 42
}

// En este ejemplo, MiClase adopta el protocolo MiProtocolo...
// y proporciona implementaciones concretas para el método...
// miMetodo y la propiedad miPropiedad.

// Implementación de Requisitos del Protocolo:
// Cuando un tipo adopta un protocolo, debe proporcionar...
// implementaciones concretas para todos los requisitos...
// del protocolo. Los requisitos pueden incluir métodos,...
// propiedades, requisitos opcionales...
// (marcados con @objc optional), y otros.


protocol OtroProtocolo {
    func otroMetodo()
}

class OtraClase: MiProtocolo, OtroProtocolo {
    func miMetodo() {
        // Implementación del método del primer protocolo
    }

    var miPropiedad: Int = 42

    func otroMetodo() {
        // Implementación del método del segundo protocolo
    }
}

// En este caso, OtraClase adopta tanto MiProtocolo...
// como OtroProtocolo, proporcionando implementaciones...
// para todos los métodos y propiedades requeridos

// Adopción Condicional y Extensiones:
// Los tipos pueden adoptar protocolos condicionalmente,...
// lo que significa que pueden adoptar un protocolo...
// solo si cumplen con ciertas condiciones.
// Esto se logra mediante extensiones condicionales.

protocol ProtocoloCondicional {
    func metodoCondicional()
}

extension MiClase: ProtocoloCondicional {
    func metodoCondicional() {
        // Implementación del método condicional
    }
}

// En este ejemplo, la clase MiClase adopta...
// condicionalmente el protocolo ProtocoloCondicional...
// mediante una extensión, proporcionando así la...
// implementación del método condicional.

// La adopción de protocolos es fundamental para...
// la flexibilidad y modularidad en Swift,...
// ya que permite que los tipos compartan...
// comportamientos comunes sin heredar...
// de una única clase base.
// Esto es particularmente útil en el contexto...
// de la programación orientada a protocolos,...
// una aproximación alternativa a la herencia de clases.



// Propiedades y Métodos Opcionales:

// Las propiedades y métodos opcionales en Swift...
// se refieren a la posibilidad de definir requisitos...
// en un protocolo que no son obligatorios para que los...
// tipos que lo adoptan los implementen. Esto permite...
// una mayor flexibilidad al definir interfaces,...
// ya que los tipos pueden optar por implementar...
// o no estos requisitos opcionales según sus necesidades.

//Propiedades Opcionales:
// Para definir una propiedad como opcional en un protocolo,...
// se utiliza la palabra clave optional y se marca...
// la propiedad con el atributo @objc para que sea...
// reconocida como opcional.

@objc protocol MiProtocolo {
    var propiedadRequerida: Int { get }
    @objc optional var propiedadOpcional: String { get }
}

// Cuando un tipo adopta este protocolo, debe implementar...
// la propiedad requerida, pero puede optar por implementar...
// o no la propiedad opcional.

class MiClase: MiProtocolo {
    var propiedadRequerida: Int = 42
    // La propiedad opcional puede o no ser implementada
}

// Métodos Opcionales:
// Para definir un método como opcional en un protocolo,...
// se utiliza la palabra clave optional y, al igual...
// que con las propiedades,...
// se marca el método con el atributo @objc.

@objc protocol MiProtocolo {
    func metodoRequerido()
    @objc optional func metodoOpcional()
}

// Cuando un tipo adopta este protocolo,...
// debe implementar el método requerido,...
// pero puede optar por implementar...
// o no el método opcional.

class MiClase: MiProtocolo {
    func metodoRequerido() {
        // Implementación del método requerido
    }

    // El método opcional puede o no ser implementado
}


// Consideraciones:

// @objc Requerido para Opcionales:
// El atributo @objc se utiliza para indicar...
// que un protocolo o sus miembros son opcionales.

// Esto se debe a que los protocolos Swift nativos...
// no admiten requisitos opcionales, pero al agregar...
// @objc, se habilita esta funcionalidad.

// Métodos Opcionales y Herencia:
// Los métodos opcionales pueden ser heredados...
// por subprotocolos, y los tipos que adoptan el...
// subprotocolo deben implementar los métodos...
// requeridos y pueden optar por implementar...
// o no los métodos opcionales.

protocol SubProtocolo: MiProtocolo {
    // Requisitos adicionales o modificados
}

// En general, las propiedades y métodos opcionales...
// en Swift brindan flexibilidad al definir protocolos,...
// permitiendo que los tipos adoptantes elijan implementar...
// solo los requisitos necesarios. Sin embargo,...
// es importante tener en cuenta que esta característica...
// se basa en @objc y tiene algunas limitaciones en comparación...
// con los requisitos obligatorios en protocolos puros de Swift.



// Herencia de Protocolos:


// La herencia de protocolos en Swift permite crear jerarquías...
// de protocolos, lo que significa que un protocolo puede...
// heredar de otro. Esto permite extender o refinar la ...
// funcionalidad de un protocolo base en un nuevo protocolo.

// Definición de un protocolo base
protocol ProtocoloBase {
    func metodoBase()
}

// Protocolo que hereda de ProtocoloBase
protocol ProtocoloHijo: ProtocoloBase {
    func metodoAdicional()
}

// En este ejemplo:

// ProtocoloBase define un requisito llamado metodoBase.
// ProtocoloHijo hereda de ProtocoloBase utilizando :
// ProtocoloBase después del nombre del protocolo hijo.
// ProtocoloHijo agrega un nuevo requisito llamado metodoAdicional.
// Cualquier tipo que adopte ProtocoloHijo...
// debe implementar tanto metodoBase como metodoAdicional.

class MiClase: ProtocoloHijo {
    func metodoBase() {
        // Implementación del métodoBase
    }

    func metodoAdicional() {
        // Implementación del métodoAdicional
    }
}


// En este ejemplo, MiClase adopta el protocolo ProtocoloHijo,...
// lo que significa que también tiene que implementar metodoBase...
// y metodoAdicional. Si el protocolo base (ProtocoloBase) tiene...
// requisitos opcionales, el protocolo hijo (ProtocoloHijo)...
// no está obligado a implementarlos.

// La herencia de protocolos es útil cuando deseas organizar...
// y estructurar tus protocolos de manera jerárquica. También...
// facilita la creación de tipos que adoptan varios protocolos,...
// ya que pueden heredar de un protocolo base y agregar...
// funcionalidades adicionales.

// Es importante destacar que Swift no admite la herencia de...
// clases múltiples, pero puedes lograr una funcionalidad...
// similar mediante la adopción de múltiples protocolos.
// La herencia de protocolos es una forma flexible...
// y poderosa de organizar y compartir..
// funcionalidades en tu código.



// Extensiones de Protocolo:

// Las extensiones de protocolo en Swift permiten agregar...
// funcionalidades adicionales y proporcionar implementaciones...
// predeterminadas para los métodos de un protocolo.
// Esto es especialmente útil cuando se quiere extender...
// la funcionalidad de tipos que adoptan un protocolo...
// sin tener que modificar directamente la implementación del tipo.

// Añadir Funcionalidades Adicionales:
// Puedes utilizar extensiones de protocolo...
// para agregar nuevos métodos y propiedades...
// a tipos que adoptan ese protocolo.

protocol MiProtocolo {
    func metodoOriginal()
}

extension MiProtocolo {
    func nuevoMetodo() {
        // Implementación del nuevo método
    }
}


// Implementaciones Predeterminadas:
// Las extensiones de protocolo pueden proporcionar...
// implementaciones predeterminadas para los métodos...
// del protocolo. Esto significa que los tipos que...
// adoptan el protocolo obtendrán automáticamente...
// estas implementaciones a menos que proporcionen...
// su propia implementación.

protocol MiProtocolo {
    func metodoOriginal()
}

extension MiProtocolo {
    func metodoOriginal() {
        // Implementación predeterminada
    }
}


// Extensiones de Tipos Concretos:
// Puedes extender un tipo concreto que adopta...
// un protocolo y proporcionar implementaciones...
// específicas para ese tipo.

protocol MiProtocolo {
    func metodoOriginal()
}

extension MiTipoConcreto: MiProtocolo {
    func metodoOriginal() {
        // Implementación específica para MiTipoConcreto
    }
}


// Extensiones Condicionales:
// Las extensiones de protocolo también pueden estar...
// condicionadas por ciertas restricciones,...
// como el tipo de datos o los protocolos...
// adicionales que ha adoptado un tipo

protocol MiProtocolo {
    func metodoOriginal()
}

extension MiTipoConcreto: MiProtocolo where Self: OtraCondicion {
    // Implementación específica para MiTipoConcreto que cumple con OtraCondicion
}

// Beneficios de las Extensiones de Protocolo:
// Las extensiones de protocolo promueven la separación...
// de preocupaciones al permitir la adición de...
// funcionalidades sin modificar directamente...
// el código original del tipo.

// Facilitan la reutilización de código y la...
// extensibilidad de los tipos existentes.

// Mejoran la legibilidad del código al agrupar...
// lógica relacionada en extensiones.

// Las extensiones de protocolo son una herramienta...
// poderosa en Swift para mejorar la modularidad...
// y extensibilidad del código, especialmente cuando...
// se trabaja con protocolos y se desea proporcionar...
// implementaciones predeterminadas o funcionalidades...
// adicionales de manera elegante.



//  *** RESUMEN *** Cuando es mas comun usar Protocolos:

// Los protocolos en Swift son comúnmente utilizados...
// para varios propósitos que mejoran la flexibilidad,...
// la modularidad y la reutilización del código.
// Aquí hay algunas situaciones comunes en las...
// que los protocolos son particularmente útiles:


// Definición de Interfaces:
// Los protocolos permiten definir interfaces...
// y contratos sin especificar la implementación.

// Proporcionan una forma clara de expresar...
// qué métodos y propiedades debe tener un tipo...
// sin preocuparse por la implementación interna.

// Herencia Múltiple:
// A diferencia de las clases, Swift no admite...
// herencia múltiple directa. Sin embargo,...
// los protocolos permiten que un tipo adopte...
// múltiples protocolos, lo que brinda una forma...
// de lograr un comportamiento similar...
// a la herencia múltiple.

// Composición de Comportamiento:
// Los protocolos permiten dividir el comportamiento...
// en unidades más pequeñas y composables.

// Un tipo puede adoptar varios protocolos para...
// incorporar diferentes aspectos de funcionalidad.

// Inyección de Dependencias:
// Los protocolos son fundamentales para la...
// implementación de patrones como la...
// inyección de dependencias.

// Permiten la creación de tipos que dependen...
// de abstracciones (protocolos) en lugar de...
// implementaciones concretas, facilitando la...
// sustitución de implementaciones...
// en tiempo de ejecución.

// Extensiones de Protocolo:
// Las extensiones de protocolo permiten proporcionar...
// implementaciones predeterminadas de métodos.

// Facilitan la adición de funcionalidad a un conjunto...
// de tipos relacionados sin requerir cambios directos...
// en su código fuente.

// Conformidad Retroactiva:
// Swift permite que los tipos adopten protocolos...
// incluso si no fueron diseñados originalmente para ello.

// Esto permite agregar funcionalidad a tipos existentes...
// sin modificar su código fuente, lo que se conoce como...
// conformidad retroactiva o retrocompatibilidad.

// Trabajo con Tipos de Forma Genérica:
// Los protocolos son esenciales para trabajar con genéricos en Swift.

// Los protocolos pueden especificar requisitos que...
// los tipos genéricos deben cumplir, proporcionando...
// así una restricción en la forma en que se...
// utilizan los tipos genéricos.

// Manejo de Eventos y Delegados:
// Los protocolos se utilizan comúnmente para definir...
// interfaces de delegados o para manejar eventos.

// Los tipos que actúan como delegados o emisores...
// de eventos adoptan protocolos específicos para establecer...
// contratos claros y permitir la comunicación entre componentes.

// En resumen, los protocolos en Swift son una herramienta...
// versátil que se utiliza para definir interfaces,...
// permitir la composición de comportamiento, facilitar...
// la inyección de dependencias y mejorar la reutilización del código.
// Su flexibilidad y capacidad para trabajar con múltiples...
// tipos los convierten en una parte esencial...
// del diseño de software en Swift.
