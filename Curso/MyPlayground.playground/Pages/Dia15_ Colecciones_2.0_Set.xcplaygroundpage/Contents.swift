import Foundation


// ---- Repaso: Colecciones ----


// tipos de datos que pueden contener múltiples valores.

// Las colecciones en Swift incluyen:


// *** ----  Set:  ---- ***


// Un Set en Swift es una colección no ordenada...
// de valores únicos del mismo tipo. En otras palabras,...
// un Set no permite elementos duplicados y no garantiza...
// un orden específico de almacenamiento.
// Está diseñado para ser eficiente al verificar...
// la existencia de un elemento y agregar o eliminar elementos.
// Puedes usar un Set cuando necesitas almacenar...
// elementos únicos y no te importa el orden en el que se almacenan.

// ---- Declaración e inicialización de un Set: ----

// se refiere al proceso de crear y asignar valores..
// iniciales a un conjunto en Swift. En términos simples,...
// declarar un conjunto significa especificar...
// que vas a utilizar un conjunto para almacenar datos,...
// y la inicialización implica proporcionar los valores...
// iniciales que contendrá el conjunto.

// *********** Declaración: ***********

// Para declarar un conjunto,
// utilizamos la palabra clave...
// var para indicar que estamos...
// creando una variable mutable...
// (cuyo contenido puede cambiar).

// Especificamos el tipo de conjunto...
// utilizando la sintaxis Set<Tipo>...
// donde "Tipo" es el tipo de datos...
// que contendrá el conjunto. Por ejemplo,...
// Set<String> es un conjunto...
// que contendrá elementos de tipo String.

// Damos un nombre a nuestro conjunto,...
// seguido de dos puntos :
// para indicar que estamos a punto...
// de proporcionar el tipo, y luego usamos Set<Tipo>.

var fruits: Set<String>

// *********** Inicialización: ***********

// Después de declarar el conjunto,...
// necesitamos asignarle valores iniciales.
// Esto se hace mediante la asignación...
// de un conjunto literal (un conjunto...
// de valores entre corchetes)...
// o mediante el uso del inicializador del conjunto.

// Al asignar valores iniciales,...
// aseguramos que los elementos del...
// conjunto sean únicos; es decir,...
// no puede haber duplicados.

fruits = ["apple", "orange", "banana"]

// En este ejemplo, hemos declarado un conjunto...
// llamado fruits que contendrá elementos...
// de tipo String y lo hemos inicializado...
// con tres valores: "apple", "orange" y "banana".

// La declaración e inicialización de un conjunto...
// también se puede hacer en una sola línea:

var fruits: Set<String> = ["apple", "orange", "banana"]

// En resumen, la declaración e inicialización...
// de un conjunto en Swift implica especificar...
// el tipo de conjunto y asignarle valores iniciales.
// Este proceso establece las bases para trabajar...
// con conjuntos y garantiza que cumplan...
// con las reglas de unicidad de elementos.



// ---- Verificación de la existencia de un elemento: ----


// Se refiere a la acción de determinar si un elemento...
// específico está presente dentro de una colección de datos. 
// En el contexto de programación, ...
// esto implica comprobar si un valor dado existe dentro...
// de una estructura de datos,...
// como un Array, un Set, un Diccionario, etc.

var fruits: Set<String> = ["apple", "orange", "banana", "grape"]

// Verificar si "orange" está presente en el Set
if fruits.contains("orange") {
    print("El set contiene naranja.")
} else {
    print("El set no contiene naranja.")
}

// En este ejemplo, fruits.contains("orange")...
// devuelve true porque "orange" está presente...
// en el Set. En el bloque if, se imprime el mensaje...
// "El set contiene naranja".
// Si "orange" no estuviera presente en el Set,...
// se ejecutaría el bloque else y se imprimiría...
// el mensaje "El set no contiene naranja".

// La verificación de la existencia de un elemento...
// es una operación común en la programación...
// y es esencial para tomar decisiones basadas...
// en la presencia o ausencia de datos específicos...
// en una colección. Este concepto se aplica no solo...
// a Sets, sino también a otros tipos de colecciones...
// en diversos lenguajes de programación.




// ---- Operaciones comunes entre Sets: -----

// se refieren a las operaciones que puedes realizar entre...
// conjuntos (Sets) en Swift. Estas operaciones aprovechan...
// la teoría de conjuntos y proporcionan funcionalidades...
// útiles para combinar, comparar o extraer elementos...
// de conjuntos. Aquí hay algunas de las operaciones...
// comunes entre conjuntos en Swift:


// *********** Unión (union): ***********

// Combina dos conjuntos en uno nuevo, eliminando duplicados.
let set1: Set<Int> = [1, 2, 3, 4]
let set2: Set<Int> = [3, 4, 5, 6]

let unionSet = set1.union(set2)
// Resultado: [1, 2, 3, 4, 5, 6]


// *********** Intersección (intersection): ***********

// Retorna un conjunto que contiene solo los...
// elementos que están presentes en ambos conjuntos.
let intersectSet = set1.intersection(set2)
// Resultado: [3, 4]


// *********** Diferencia (subtracting): ***********

// Retorna un conjunto que contiene elementos...
// que están en el primer conjunto pero no en el segundo.
let differenceSet = set1.subtracting(set2)
// Resultado: [1, 2]


// *********** Diferencia simétrica (symmetricDifference): ***********

// Retorna un conjunto que contiene elementos...
// que están en uno de los conjuntos pero no en ambos.
let symmetricDiffSet = set1.symmetricDifference(set2)
// Resultado: [1, 2, 5, 6]


// Estas operaciones proporcionan formas convenientes...
// de manipular conjuntos y realizar tareas comunes...
// asociadas con la teoría de conjuntos.
// Puedes utilizar estas operaciones según tus necesidades...
// específicas para combinar, comparar y extraer elementos...
// de conjuntos en Swift. Estas operaciones son eficientes...
// y se benefician de la implementación...
// interna de Swift para manejar conjuntos de manera eficaz.
